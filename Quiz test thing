{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyO2X/jdfyOd2YHugbWVkysn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/janemajor/Repository/blob/master/Quiz%20test%20thing\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gk9wKDyr5fAA"
      },
      "source": [
        "1. Zander's list isn't working because he's asking python to print \"my_list\" outside of the loop, so python is printing the list of letters without the changes. however, Yazmin is asking python to print each individual letter (item) inside her loop. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oItaIc4I6aoE",
        "outputId": "bd09ed86-2250-4b34-f2a1-695ab89e69ce",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "def listStuff( food_list ):\n",
        "  new_list = []\n",
        "  size = len(food_list)\n",
        "  for count in range(size):\n",
        "    food = food_list[count]\n",
        "    if food == \"pineapple\":\n",
        "      new_list.append(\"PINEAPPLE!!\")\n",
        "    elif not (food == \"olive\"):\n",
        "      new_list.append(food)\n",
        "  return new_list \n",
        "alist=[\"olive\", \"pineapple\", \"cookie\"]\n",
        "listStuff(alist)\n"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['PINEAPPLE!!', 'cookie']"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EKIR_8Bm8OM4"
      },
      "source": [
        "2A) Okay so what we're doing is if we give this function a list of food, it's basically going to go through each item and if we put \"olives\" on the list it isn't going to like that and it's going to remove it from the list. However it really likes pineapples so if we put pineapples on the list it's going to replace it with PINEAPPLES!! in all caps plus some exclamation marks just to be extra. \n",
        "\n",
        "2B) what the \"food=food_list[count]\" line is doing is basically setting the variable \"food\" equal to each item in the list so it can go through seeing if each food is equal to pineapple or olives. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lP3aOGfs-4GE"
      },
      "source": [
        "3A) My robot could have gotten lost on the way to the bayfront. I may need to give it clearer instructions. The robot could have not seen any birds and didn't know what to do then. It could not know how to operate a phone, although i don't know how it would text me then. It could also not know my email address. Or not have any internet connection. The phone battery could have died, although again i don't know how it would've texted me in that case. The phone could also be out of storage. Maybe the robot just kept on taking pictures forever because it didn't know when to stop. Maybe the robot's still taking pictures right now. Poor thing. \n",
        "\n",
        "3B) So first I would have the robot text me when it got to the bayfront. Then I would have it text me when it saw any birds. I would have it text me when it takes each picture (which may seem excessive but might be helpful) and when it's done taking the pictures. If I didn't get that first text from the robot, I would know that I need to give it clearer instructions on how to get to the bayfront. If I did get that text but not the next one, I would know that either there are no birds to be photographed or that my robot simply doesn't know what they look like. If I got that text but not the next one, I would know that my robot probably doesn't know how to take pictures, or it's unable to for some reason. And then I could check out what's wrong with the phone. If I kept getting an endless amount of texts every time my robot took a picture, I would know I need to tell it to please stop that's plenty of bird pictures. If I got the text saying it's done taking the pictures, but I don't get the email, I would know there's something wrong with the email address or something of that sort.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rG4EndlqF7ki"
      },
      "source": [
        "4A) Okay so what Baab did wrong here is for some reason he was trying to make \"new_string\" uppercase just by typing \"new_string.upper()\" instead of setting to a new variable. Same thing with the .replace() command he just put it on the end of new_string again and expected it to make the value of the variable change. Then he tried to just print that same variable without putting it in the function. \n",
        "\n",
        "4B) So first, instead of \"new_string.upper()\" we're going to put the line \"newer_string=new_string.upper()\". Instead of \"new_string.replace(\"E\", \"3\")\" we'll put \"final_string=newer_string.replace(\"E\", \"3\")\". Where he put \"makeL33T(\"Let's get started!\")\" we're going to set that to a new variable and print that variable. and then the rest should be good. So basically this. \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gKU5DuYAGDps",
        "outputId": "27d769d4-9a14-4b34-bc14-19cc70ef46db",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "def makeL33T(message):\n",
        "  new_string = message\n",
        "  newerstring=new_string.upper()\n",
        "  newererstring=newerstring.replace(\"E\", \"3\")\n",
        "  return newererstring\n",
        "\n",
        "leet=makeL33T(\"Let's get started!\")\n",
        "print(leet)\n",
        "msg = input(\"enter your message: \")\n",
        "leet_msg = makeL33T(msg)\n",
        "print(leet_msg)\n",
        "\n"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "L3T'S G3T START3D!\n",
            "enter your message: bears. beets. battlestar galactica. \n",
            "B3ARS. B33TS. BATTL3STAR GALACTICA. \n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EDf7yp_3KvXs"
      },
      "source": [
        "Okay alice first things first we have to import the file and decode it. Then we probably want to make the whole thing lowercase just to make life easier on us. Then we'll want to count each vowel. So we'll do that by creating a function where you can enter a file name and a letter. It'll have a wordcount variable that will add 1 to its value every time it sees the given letter. This'll have to be in a for loop. So we'll do that for each vowel. And then we'll have to have a bunch of if statements that say if this vowel's wordcount is larger than all of the other vowels' wordcounts, return that vowel. And each vowel with have to have that. "
      ]
    }
  ]
}